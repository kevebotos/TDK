#!/usr/bin/env python3
"""
Heat Transfer Animation Generator

This script reads Gmsh .pos files generated by the heat transfer simulation
and creates an animated GIF showing the temperature evolution over time.
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.tri as tri
from matplotlib.animation import FuncAnimation
import os
import re
from PIL import Image

def parse_pos_file(filename):
    """Parse a Gmsh .pos file and extract temperature data."""
    nodes = []
    temperatures = []
    
    with open(filename, 'r') as f:
        lines = f.readlines()
    
    # Find the scalar view section
    in_scalar_section = False
    for line in lines:
        if 'View "Temperature"' in line:
            in_scalar_section = True
            continue
        
        if in_scalar_section:
            if line.strip().startswith('SP('):
                # Parse scalar point data: SP(x,y,z){temperature};
                # Extract coordinates and temperature
                line_clean = line.strip()[3:-1]  # Remove 'SP(' and ');'
                
                # Split at the closing parenthesis and opening brace
                parts = line_clean.split('){')
                if len(parts) != 2:
                    continue
                    
                coords_str = parts[0]
                temp_str = parts[1].rstrip('}')
                
                # Parse coordinates (3 values: x,y,z)
                coords = [float(x) for x in coords_str.split(',')]
                
                # Parse temperature
                temp = float(temp_str)
                
                # Store node position and temperature
                nodes.append((coords[0], coords[1]))  # (x, y)
                temperatures.append(temp)
    
    # Convert to numpy arrays
    nodes = np.array(nodes)
    temperatures = np.array(temperatures)
    
    # Create Delaunay triangulation for visualization
    if len(nodes) > 0:
        return nodes, temperatures
    else:
        return np.array([]), np.array([])

def create_animation():
    """Create animated GIF from .pos files."""
    
    # Find all .pos files
    pos_files = []
    for filename in os.listdir('.'):
        if filename.startswith('temperature_') and filename.endswith('.pos'):
            # Extract time step from filename
            match = re.search(r'temperature_(\d+)\.pos', filename)
            if match:
                time_step = int(match.group(1))
                pos_files.append((time_step, filename))
    
    if not pos_files:
        print("‚ùå No .pos files found!")
        print("Make sure you have run the simulation first: ./tdk")
        return
    
    # Sort by time step
    pos_files.sort()
    print(f"üìÅ Found {len(pos_files)} .pos files")
    
    # Parse the first file to get mesh structure
    _, first_file = pos_files[0]
    nodes, _ = parse_pos_file(first_file)
    
    if len(nodes) == 0:
        print("‚ùå No valid data found in .pos files!")
        return
    
    print(f"üîó Mesh: {len(nodes)} nodes")
    
    # Create Delaunay triangulation from node positions
    x_coords = nodes[:, 0]
    y_coords = nodes[:, 1]
    triang = tri.Triangulation(x_coords, y_coords)
    
    # Collect all temperature data
    all_temps = []
    time_points = []
    
    for time_step, filename in pos_files:
        try:
            _, temps = parse_pos_file(filename)
            all_temps.append(temps)
            time_points.append(time_step * 10)  # Convert to seconds (output every 10s)
        except Exception as e:
            print(f"‚ö†Ô∏è  Warning: Could not parse {filename}: {e}")
    
    if not all_temps:
        print("‚ùå No valid temperature data found!")
        return
    
    all_temps = np.array(all_temps)
    
    # Find global temperature range for consistent color scale
    temp_min = np.min(all_temps)
    temp_max = np.max(all_temps)
    print(f"üå°Ô∏è  Temperature range: {temp_min:.1f}¬∞C to {temp_max:.1f}¬∞C")
    
    # Create figure and axis
    fig, ax = plt.subplots(figsize=(12, 8))
    ax.set_aspect('equal')
    ax.set_title('2D Heat Transfer Simulation - Stove Top', fontsize=16, fontweight='bold')
    ax.set_xlabel('X Position (m)', fontsize=12)
    ax.set_ylabel('Y Position (m)', fontsize=12)
    
    # Create initial plot
    tcf = ax.tripcolor(triang, all_temps[0], shading='flat', cmap='hot', 
                       vmin=temp_min, vmax=temp_max)
    
    # Add colorbar
    cbar = plt.colorbar(tcf, ax=ax, shrink=0.8)
    cbar.set_label('Temperature (¬∞C)', fontsize=12)
    
    # Add time and temperature info text
    time_text = ax.text(0.02, 0.98, '', transform=ax.transAxes, fontsize=12,
                        verticalalignment='top', bbox=dict(boxstyle='round', 
                        facecolor='white', alpha=0.8))
    
    temp_text = ax.text(0.02, 0.88, '', transform=ax.transAxes, fontsize=10,
                        verticalalignment='top', bbox=dict(boxstyle='round', 
                        facecolor='lightblue', alpha=0.8))
    
    # Animation function
    def animate(frame):
        if frame < len(all_temps):
            # Update temperature data
            tcf.set_array(all_temps[frame])
            
            # Update time display
            time_text.set_text(f'Time: {time_points[frame]:.0f} seconds')
            
            # Update temperature info
            current_temp = all_temps[frame]
            avg_temp = np.mean(current_temp)
            max_temp = np.max(current_temp)
            temp_text.set_text(f'Avg: {avg_temp:.1f}¬∞C\nMax: {max_temp:.1f}¬∞C')
        
        return tcf, time_text, temp_text
    
    # Create animation
    print("üé¨ Creating animation...")
    anim = FuncAnimation(fig, animate, frames=len(all_temps), 
                        interval=200, blit=False, repeat=True)
    
    # Save as GIF
    output_file = 'heat_transfer_animation.gif'
    print(f"üíæ Saving animation to {output_file}...")
    
    try:
        anim.save(output_file, writer='pillow', fps=5, dpi=100)
        
        # Check file size
        file_size = os.path.getsize(output_file) / (1024 * 1024)  # MB
        print(f"‚úÖ Animation saved successfully!")
        print(f"üìä File size: {file_size:.1f} MB")
        print(f"üéØ Frames: {len(all_temps)}")
        print(f"‚è±Ô∏è  Duration: {time_points[-1]:.0f} seconds simulation time")
        
    except Exception as e:
        print(f"‚ùå Error saving animation: {e}")
        print("üí° Make sure you have pillow installed: pip install pillow")
    
    plt.close()

if __name__ == "__main__":
    print("üî• Heat Transfer Animation Generator")
    print("=" * 40)
    create_animation()
